ü§ñ AI Development Instructions by Agent ‚Äì cncpick2

This document outlines targeted instructions for AI developers (human or model-assisted) working on the cncpick2 project. Each section corresponds to a specific agent and includes a self-contained task description.

‚∏ª

1. simulator_agent

You are now focusing on implementing the simulator_agent in the cncpick2 project. This agent simulates physical objects entering the conveyor belt and emits the initial object_spawned message.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map
	‚Ä¢	simulation_agent_design.txt
	‚Ä¢	sanity_test_workflow.txt

Ensure you:
	‚Ä¢	Periodically spawn synthetic objects
	‚Ä¢	Assign object_id, spawn_time, position, and lane
	‚Ä¢	Emit object_spawned messages
	‚Ä¢	Operate on a test timer or pre-seeded flow sequence

‚∏ª

2. vision_agent

You are now focusing on implementing the vision_agent in the cncpick2 project. This agent simulates YOLO detection using RGB/depth input and emits object_detected messages.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map
	‚Ä¢	lane_mapping_strategy.txt
	‚Ä¢	sanity_test_workflow.txt

Ensure you:
	‚Ä¢	Detect object class, size, and height
	‚Ä¢	Infer lane based on bounding box
	‚Ä¢	Emit object_detected messages
	‚Ä¢	Include height_mm and area_px in output

‚∏ª

3. scoring_agent

You are now focusing on implementing the scoring_agent in the cncpick2 project. This agent receives object detection events from vision_agent and assigns the best candidate to an available motion_agent. Your output should follow the messaging format defined in the project and be traceable by the data_logging_agent.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map
	‚Ä¢	sanity_test_workflow.txt
	‚Ä¢	development_plan_phase1_to_5.txt

Ensure you:
	‚Ä¢	Maintain a ranked object queue
	‚Ä¢	Assign objects fairly and efficiently
	‚Ä¢	Emit object_assigned messages with assigned_to field
	‚Ä¢	Avoid race conditions when multiple motion agents are present

‚∏ª

4. motion_agent_X

You are now focusing on implementing the motion_agent in the cncpick2 project. This agent executes pickup and drop motion sequences based on assigned objects.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map
	‚Ä¢	sanity_test_workflow.txt

Ensure you:
	‚Ä¢	Accept assigned object_id and lane
	‚Ä¢	Move to pickup location using simulated or GRBL driver
	‚Ä¢	Request and wait for trigger confirmation
	‚Ä¢	Run G-code to activate vacuum, pick, and drop object
	‚Ä¢	Emit object_picked, object_dropped, and motion_ready

‚∏ª

5. trigger_agent

You are now focusing on implementing the trigger_agent in the cncpick2 project. This agent watches the pickup zone and confirms when the assigned object has arrived.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map
	‚Ä¢	sanity_test_workflow.txt

Ensure you:
	‚Ä¢	Monitor each lane continuously
	‚Ä¢	Match object detection to area and lane
	‚Ä¢	Emit object_ready_for_pickup to the waiting motion_agent

‚∏ª

6. grbl_driver_agent

You are now focusing on implementing the grbl_driver_agent in the cncpick2 project. This agent receives G-code from motion agents and returns execution status.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map
	‚Ä¢	development_plan_phase1_to_5.txt

Ensure you:
	‚Ä¢	Accept and execute G-code commands
	‚Ä¢	Simulate CNC motion when in test mode
	‚Ä¢	Provide ‚Äúok‚Äù, ‚Äúerror‚Äù, and completion responses

‚∏ª

7. post_pick_monitor_agent

You are now focusing on implementing the post_pick_monitor_agent in the cncpick2 project. This agent monitors for objects that pass through the pickup zone without being picked up.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map

Ensure you:
	‚Ä¢	Track all previously detected object_ids
	‚Ä¢	Identify unpicked or missed objects
	‚Ä¢	Emit object_passed_through or object_missed

‚∏ª

8. data_logging_agent

You are now focusing on implementing the data_logging_agent in the cncpick2 project. This agent records all system messages to structured logs for debugging and replay.

Please read these documents before coding:
	‚Ä¢	detailed_logic_map
	‚Ä¢	sanity_test_workflow.txt
	‚Ä¢	assert_helpers.py
	‚Ä¢	test_runner.py

Ensure you:
	‚Ä¢	Subscribe to all ZeroMQ message channels
	‚Ä¢	Write JSONL or SQLite logs with timestamps
	‚Ä¢	Include agent name and event in each entry
	‚Ä¢	Store summaries and allow playback support