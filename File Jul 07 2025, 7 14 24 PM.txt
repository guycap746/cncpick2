ðŸ§ª Test Runner â€“ cncpick2

This document outlines the structure and purpose of test_runner.py, which automates test execution and validation for the cncpick2 system.

â¸»

ðŸŽ¯ Purpose
	â€¢	Orchestrate end-to-end test runs
	â€¢	Load simulation and config environments
	â€¢	Call assertion hooks to validate logic steps
	â€¢	Track failures and summary stats

â¸»

ðŸš€ Execution Flow
	1.	Starts a scenario or controlled sim profile
	2.	Monitors data_logging_agent output
	3.	Loads structured log stream
	4.	Invokes assertion helpers:

from assert_helpers import hook_after_spawn, hook_after_detection, ...


	5.	Validates event sequencing and agent roles
	6.	Writes pass/fail results to console + file

â¸»

ðŸ§© Hook Coverage

Each test sequence maps to known checkpoints:
	â€¢	Object spawn
	â€¢	Vision detection
	â€¢	Assignment logic
	â€¢	Trigger approval
	â€¢	Motion pickup
	â€¢	Drop confirmation

â¸»

ðŸ§° Outputs
	â€¢	Console summary (âœ” / âœ– per hook)
	â€¢	results_summary.json
	â€¢	Optional annotated debug log

â¸»

ðŸ”§ Example Usage

python test_runner.py --profile test_sanity


â¸»

ðŸ§ª Future Features
	â€¢	Batch test runner
	â€¢	Scenario replay validation
	â€¢	Visual diff tools for regression

â¸»

ðŸ“Œ Summary

The test runner is central to validating correct agent interactions and ensuring that all logical events are properly emitted and processed in order.